from aiogram.types import Message, CallbackQuery
from aiogram import F
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext

from utils.admin_router import admin_router
from keyboards.admin_reply import *
from keyboards.admin_inline import *
from states import AdminStates
from loader import status_dict, bot_base, settings_dict, bot, app_run, app
from handlers.gratitude_checker import check_new_status, get_username
from utils.message_cleaner import message_cleaner

# from pyrogram import Client
#
# app = Client("gratitude_checker")

def escape_special_chars(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ."""
    escaped = ''
    for char in text:
        if char in '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~':
            escaped += '\\' + char
        else:
            escaped += char
    return escaped


@admin_router.message(Command('start'))
async def start_function(msg: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω–ø–∞–Ω–µ–ª–∏"""
    await state.clear()
    await msg.answer(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å {msg.from_user.first_name}üòÄ\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ\:', reply_markup=main_menu)


@admin_router.message(F.text == 'üö´ –û—Ç–º–µ–Ω–∞')
async def cancel_func(msg: Message, state: FSMContext):
    """–í—Å–µ –æ—Ç–º–µ–Ω—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º"""
    await state.clear()
    await msg.answer(f'–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ\:', reply_markup=main_menu)


@admin_router.message(F.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def get_settings_menu(msg: Message):
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É\:', reply_markup=all_settings)


@admin_router.callback_query(F.data.startswith('set_'))
async def choice_setting(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫ –µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    await callback.answer()
    setting_dict = {
        'set_status': ('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ\:', status_setting),
        'set_level': (f'–ü–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç {settings_dict["achievement"]} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏', level_setting),
        'set_interval': (f'–ò–Ω—Ç–µ—Ä–≤–∞–ª —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ '
                         f'{await message_cleaner.get_interval()} –º–∏–Ω—É—Ç', interval_change)
    }
    await callback.message.answer(setting_dict[callback.data][0], reply_markup=setting_dict[callback.data][1])


# --------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —á–∞—Ç–æ–≤
# --------------------


@admin_router.callback_query(F.data == 'interval')
async def start_change_interval(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞\:', reply_markup=cancel_button)
    await state.set_state(AdminStates.interval)


@admin_router.message(AdminStates.interval)
async def set_interval(msg: Message, state: FSMContext):
    """–ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    try:
        await message_cleaner.set_interval(int(msg.text))
        await msg.answer('–ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', reply_markup=main_menu)
        await bot_base.set_new_setting('interval', msg.text)
        await state.clear()
    except ValueError:
        await msg.answer('–û—à–∏–±–∫–∞\! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\:')


@admin_router.callback_query(F.data == 'sett_chats')
async def get_chats_list(callback: CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏ –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º–∏"""
    await callback.answer()
    msg_text = '–î–µ–π—Å—Ç–≤—É—é—â–∏–µ —á–∞—Ç—ã\:\n\n'
    for chat in settings_dict['chats']:
        ch = await bot.get_chat(chat)
        msg_text += f'{escape_special_chars(ch.title)}\n'
    await callback.message.answer(msg_text, reply_markup=chats_setting)


@admin_router.callback_query(F.data.startswith('chat_'))
async def choice_action_with_chat(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è —Å —á–∞—Ç–∞–º–∏"""
    await callback.answer()
    action_dict = {
        'chat_add': ('–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ https:\/\/t\.me\/chat\_username –∏–ª–∏ id —á–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', AdminStates.chat_add),
        'chat_del': ('–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ https:\/\/t\.me\/chat\_username –∏–ª–∏ id —á–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', AdminStates.chat_del)
    }
    await callback.message.answer(action_dict[callback.data][0], reply_markup=cancel_button)
    await state.set_state(action_dict[callback.data][1])


@admin_router.message(AdminStates.chat_add)
async def add_chat_to_bot(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    try:
        if 'https' in msg.text:
            chat = msg.text.replace('https://t.me/', '@')
            chat = await bot.get_chat(chat)
        else:
            chat = await bot.get_chat(int(msg.text))
        settings_dict['chats'].add(chat.id)
        await bot_base.add_chat(chat.id)
        await state.clear()
        await msg.answer(f'–ß–∞—Ç {chat.title} –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=main_menu)
    except Exception as e:
        await msg.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞\!')
        print(e)


@admin_router.message(AdminStates.chat_del)
async def remove_chat_from_bot(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    try:
        if 'https' in msg.text:
            chat = msg.text.replace('https://t.me/', '@')
            chat = await bot.get_chat(chat)
        else:
            chat = await bot.get_chat(int(msg.text))
        settings_dict['chats'].remove(chat.id)
        await bot_base.remove_chat(chat.id)
        await state.clear()
        await msg.answer(f'–ß–∞—Ç {chat.title} —É–¥–∞–ª–µ–Ω', reply_markup=main_menu)
    except Exception as e:
        await msg.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞\!')
        print(e)


# --------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏
# --------------------


@admin_router.callback_query(F.data.startswith('status_'))
async def status_management(callback: CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
    await callback.answer()
    if callback.data == 'status_view':
        msg_text = '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã\:\n\n'
        for points_need, status_name in status_dict.items():
            msg_text += f'{status_name}: {points_need} –æ—á–∫–æ–≤\n'
        await callback.message.answer(msg_text, reply_markup=await view_status_list(status_dict))
        pass
    else:
        await state.set_state(AdminStates.status_add_name)
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞\:', reply_markup=cancel_button)


@admin_router.message(AdminStates.status_add_name)
async def get_status_name(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    await state.set_data({'status_name': msg.text})
    await state.set_state(AdminStates.status_add_points)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—á–∫–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞\:')


@admin_router.message(AdminStates.status_add_points)
async def get_status_points(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –æ—á–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        status_name = (await state.get_data())['status_name']
        for points, status in status_dict.items():
            if status == status_name:
                status_dict.pop(points)
                status_dict[int(msg.text)] = status_name
                break
        else:
            status_dict[int(msg.text)] = status_name
        await bot_base.add_status(status_name, int(msg.text))
        await msg.answer('–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ–±–∞–≤–ª–µ–Ω\!', reply_markup=main_menu)
        await state.clear()
    except ValueError:
        await msg.answer('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\:')


@admin_router.callback_query(F.data.startswith('del_'))
async def remove_status(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å"""
    rm_status = status_dict.pop(int(callback.data.replace('del_', '')))
    await bot_base.remove_status(rm_status)
    msg_text = '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã\:\n\n'
    for points_need, status_name in status_dict.items():
        msg_text += f'{status_name}\: {points_need} –æ—á–∫–æ–≤\n'
    await callback.message.edit_text(msg_text, reply_markup=await view_status_list(status_dict))


# --------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–∞–º–∏
# --------------------


@admin_router.message(F.text == 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º')
async def balance_management_menu(msg: Message, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\, –Ω–∞–¥ —á—å–∏–º –±–∞–ª–∞–Ω—Å–æ–º —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—é\:')
    await state.set_state(AdminStates.select_user)


@admin_router.message(AdminStates.select_user)
async def select_user_for_manipulation(msg: Message, state: FSMContext):
    """–ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞"""
    # await app.start()
    try:
        await app_run()
    except ConnectionError:
        pass
    user_id = (await app.get_users(msg.text)).id
    # await app.stop()
    try:
        user_info = await bot_base.get_user_info(user_id)
        msg_text = (f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.text}:\n'
                    f'–í—Å–µ–≥–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–æ: {user_info[1]}\n'
                    f'–ù–∞ –±–∞–ª–∞–Ω—Å–µ: {user_info[2]}\n'
                    f'–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info[3]}')
    except IndexError:
        # –ó–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
        msg_text = (f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.text}:\n'
                    f'–í—Å–µ–≥–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–æ: 0\n'
                    f'–ù–∞ –±–∞–ª–∞–Ω—Å–µ: 0\n'
                    f'–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: None')

    await state.set_data({'uid': user_id, 'ufn': msg.text})
    await msg.answer(escape_special_chars(msg_text), reply_markup=balance_menu)


@admin_router.callback_query(AdminStates.select_user, F.data.startswith('balance_'))
async def user_balance_manipulation(callback: CallbackQuery, state: FSMContext):
    """–ó–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()
    action_dict = {
        'balance_add': (AdminStates.balance_add, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å\:'),
        'balance_reduce': (AdminStates.balance_reduce, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è\:'),
        'balance_rep_reduce': (AdminStates.balance_rep_reduce, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è\:')
    }
    await callback.message.answer(action_dict[callback.data][1], reply_markup=cancel_button)
    await state.set_state(action_dict[callback.data][0])


@admin_router.message(AdminStates.balance_add)
async def user_balance_add(msg: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        user = await state.get_data()
        user_id = (await state.get_data())['uid']
        await bot_base.add_points(user_id, int(msg.text))
        await msg.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user["ufn"]} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {msg.text} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏', reply_markup=main_menu)
        await check_new_status(user_id)

        for chat in settings_dict['chats']:  # –ò—â–µ–º —é–∑–µ—Ä–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º –∏ –ø–æ —ç—Ç–∏–º –∂–µ —á–∞—Ç–∞–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try:
                user_name = await get_username(chat, user_id)
                user = await bot_base.get_user_info(user_id)
                if user_name:
                    msg_text = f"""{settings_dict["admin_add"].format(
                        user_name=user_name,
                        user_rep=user[1],
                        user_points=user[2],
                        user_status=user[3] if user[3] else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                        add_points=msg.text,
                        reduce_points=0
                    )}"""
                    mess = await bot.send_message(chat_id=chat, text=msg_text)
                    await message_cleaner.schedule_message_deletion(mess.chat.id, mess.message_id)
            except Exception as e:
                print(e)
        await state.clear()
    except ValueError:
        await msg.answer('–û—à–∏–±–∫–∞\! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\:')


@admin_router.message(AdminStates.balance_reduce)
async def user_balance_reduce(msg: Message, state: FSMContext):
    """–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–æ–≤ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await state.get_data()
        user_id = (await state.get_data())['uid']
        await bot_base.reduce_user_balance(user_id, int(msg.text))
        await msg.answer(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user["ufn"]} —Å–ø–∏—Å–∞–Ω–æ {msg.text} –æ—á–∫–æ–≤', reply_markup=main_menu)
        for chat in settings_dict['chats']:  # –ò—â–µ–º —é–∑–µ—Ä–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º –∏ –ø–æ —ç—Ç–∏–º –∂–µ —á–∞—Ç–∞–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try:
                user_name = await get_username(chat, user_id)
                user = await bot_base.get_user_info(user_id)
                if user_name:
                    msg_text = f"""{settings_dict["admin_reduce"].format(
                        user_name=user_name,
                        user_rep=user[1],
                        user_points=user[2],
                        user_status=user[3] if user[3] else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                        add_points=0,
                        reduce_points=msg.text
                    )}"""
                    mess = await bot.send_message(chat_id=chat, text=msg_text)
                    await message_cleaner.schedule_message_deletion(mess.chat.id, mess.message_id)
            except Exception as e:
                print(e)
        await state.clear()
    except ValueError:
        await msg.answer('–û—à–∏–±–∫–∞\! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\:')


@admin_router.message(AdminStates.balance_rep_reduce)
async def reduce_reputation(msg: Message, state: FSMContext):
    """–°–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from handlers.gratitude_checker import check_new_status
        user = await state.get_data()
        user_id = (await state.get_data())['uid']
        await bot_base.reduce_reputation(user_id, int(msg.text))
        await check_new_status(user_id)
        await msg.answer(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user["ufn"]} —Å–ø–∏—Å–∞–Ω–æ {msg.text} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏', reply_markup=main_menu)
        for chat in settings_dict['chats']:  # –ò—â–µ–º —é–∑–µ—Ä–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º –∏ –ø–æ —ç—Ç–∏–º –∂–µ —á–∞—Ç–∞–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try:
                user_name = await get_username(chat, user_id)
                user = await bot_base.get_user_info(user_id)
                if user_name:
                    msg_text = f"""{settings_dict["admin_rep_reduce"].format(
                        user_name=user_name,
                        user_rep=user[1],
                        user_points=user[2],
                        user_status=user[3] if user[3] else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                        add_points=0,
                        reduce_points=msg.text
                    )}"""
                    mess = await bot.send_message(chat_id=chat, text=msg_text)
                    await message_cleaner.schedule_message_deletion(mess.chat.id, mess.message_id)
            except Exception as e:
                print(e, e.args)
        await state.clear()
    except ValueError:
        await msg.answer('–û—à–∏–±–∫–∞\! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\:')


# --------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
# --------------------


@admin_router.callback_query(F.data == 'level_set')
async def change_achievement(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\:', reply_markup=cancel_button)
    await state.set_state(AdminStates.set_level)


@admin_router.message(AdminStates.set_level)
async def set_new_achievement(msg: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    try:
        await bot_base.set_new_setting('achievement', int(msg.text))
        settings_dict['achievement'] = int(msg.text)
        await msg.answer(f'–ù–æ–≤—ã–π –ø–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ {msg.text} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏\(–∏–π\) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', reply_markup=main_menu)
        await state.clear()
    except ValueError:
        await msg.answer('–û—à–∏–±–∫–∞\! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\:')


# --------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# --------------------


@admin_router.callback_query(F.data == 'sett_notification')
async def notification_menu(callback: CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await callback.answer()
    msg_text = (f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n'
                f'*–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\:\n{settings_dict["new_gratitude"]}\n\n'
                f'*–ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\:\n{settings_dict["new_achievement"]}\n\n'
                f'*–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞*\:\n{settings_dict["new_status"]}\n\n'
                f'*–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*\:\n{settings_dict["karma"]}\n\n'
                f'*–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\:\n{settings_dict["admin_add"]}\n\n'
                f'*–†–µ–π—Ç–∏–Ω–≥ —á–∞—Ç–∞*\:\n{settings_dict["rating"]}\n\n'
                f'*–°–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏*\:\n{settings_dict["admin_rep_reduce"]}\n\n'
                f'*–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤*\:\n{settings_dict["admin_reduce"]}').format(
        user_name='@UserName',
        user_rep=10,
        user_points=5,
        user_status='–¶–∞—Ä—å –≤—Å–µ—è —á–∞—Ç–∞',
        add_points=2,
        reduce_points=3
    )
    await callback.message.answer(msg_text, reply_markup=notification_setting)


@admin_router.callback_query(F.data.startswith('notif_'))
async def start_notif_change(callback: CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç—è—Ç –∏–∑–º–µ–Ω–∏—Ç—å"""
    await callback.answer()
    await state.set_state(AdminStates.sett_notification)
    await state.set_data({'notification': callback.data.replace('notif_', '')})
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', reply_markup=cancel_button)


@admin_router.message(AdminStates.sett_notification)
async def catch_new_text_for_notification(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º"""
    try:
        notif = (await state.get_data())['notification']
        new_notif_text = msg.md_text.replace('\{', '{')
        new_notif_text = new_notif_text.replace('\}', '}')
        new_notif_text = new_notif_text.replace('\_', '_')
        settings_dict[notif] = new_notif_text
        msg_text = (f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n'
                    f'*–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\:\n{settings_dict["new_gratitude"]}\n\n'
                    f'*–ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\:\n{settings_dict["new_achievement"]}\n\n'
                    f'*–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞*\:\n{settings_dict["new_status"]}\n\n'
                    f'*–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*\:\n{settings_dict["karma"]}\n\n'
                    f'*–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\:\n{settings_dict["admin_add"]}\n\n'
                    f'*–†–µ–π—Ç–∏–Ω–≥ —á–∞—Ç–∞*\:\n{settings_dict["rating"]}\n\n'
                    f'*–°–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏*\:\n{settings_dict["admin_rep_reduce"]}\n\n'
                    f'*–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤*\:\n{settings_dict["admin_reduce"]}').format(
            user_name='@UserName',
            user_rep=10,
            user_points=5,
            user_status='–¶–∞—Ä—å –≤—Å–µ—è —á–∞—Ç–∞',
            add_points=2,
            reduce_points=3
        )
        await bot_base.set_new_setting(notif, new_notif_text)
        await msg.answer('–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω\!', reply_markup=main_menu)
        await msg.answer(msg_text, reply_markup=notification_setting)
        await state.clear()
    except Exception as e:
        await msg.answer('–û—à–∏–±–∫–∞ –≤–æ–¥–∞\!')
        print(e.args)
        print(e)


# --------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ "–±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ" —Å–ø–∏—Å–∫–∞
# --------------------


@admin_router.callback_query(F.data == 'sett_gratitude')
async def start_change_gratitude_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤, –∞ —Ç–∞–∫ –∂–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–∏—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å """
    await callback.answer()
    msg_text = '–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ \"–±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö\" —Å–ª–æ–≤:\n\n'
    for word in settings_dict['gratitude_list']:
        msg_text += word + '\n'
    await callback.message.answer(msg_text, reply_markup=gratitude_list_setting)


@admin_router.callback_query(F.data.startswith('gratitude_'))
async def choice_action_with_gratitude(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π"""
    await callback.answer()
    action_dict = {
        'gratitude_add': (AdminStates.gratitude_add, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ:'),
        'gratitude_del': (AdminStates.gratitude_del, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    }
    await state.set_state(action_dict[callback.data][0])
    await callback.message.answer(action_dict[callback.data][1], reply_markup=cancel_button)


@admin_router.message(AdminStates.gratitude_add)
async def add_new_gratitude(msg: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"""
    settings_dict['gratitude_list'].add(msg.text)
    await bot_base.add_gratitude_word(msg.text)
    await msg.answer('–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\!')
    msg_text = '–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ \"–±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö\" —Å–ª–æ–≤:\n\n'
    for word in settings_dict['gratitude_list']:
        msg_text += escape_special_chars(word) + '\n'
    await msg.answer(msg_text, reply_markup=cancel_button)
    await state.clear()


@admin_router.message(AdminStates.gratitude_del)
async def remove_gratitude(msg: Message, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"""
    try:
        settings_dict['gratitude_list'].remove(msg.text)
    except KeyError:  # –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ —á–µ–≥–æ –Ω–µ—Ç
        pass
    await bot_base.remove_gratitude_word(msg.text)
    await msg.answer('–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ\!')
    msg_text = '–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ "–±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö" —Å–ª–æ–≤:\n\n'
    for word in settings_dict['gratitude_list']:
        msg_text += word + '\n'
    await msg.answer(msg_text)
    await state.clear()


@admin_router.message(Command('get_settings'))
async def output_settings_from_db(msg: Message, command: CommandObject):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î (–æ—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    if not command.args:
        settings_list = await bot_base.get_all_settings()
        msg_text = ''
        for s in settings_list:
            msg_text += f'{s[0]}: {s[1]}\n\n'
        await msg.answer(escape_special_chars(msg_text))
    else:
        try:
            await bot_base.drop_setting(command.args)
        except Exception as e:
            await msg.answer(str(e))
