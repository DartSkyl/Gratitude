from aiogram.types import Message, CallbackQuery
from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from utils.admin_router import admin_router
from keyboards.admin_reply import *
from keyboards.admin_inline import *
from states import AdminStates
from loader import status_dict, bot_base, settings_dict, bot
from handlers.gratitude_checker import check_new_status, get_username
from config import CHAT_ID
from utils.message_cleaner import message_cleaner


@admin_router.message(Command('start'))
async def start_function(msg: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω–ø–∞–Ω–µ–ª–∏"""
    await state.clear()
    await msg.answer(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å <b>{msg.from_user.first_name}</b>üòÄ\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=main_menu)


@admin_router.message(F.text == 'üö´ –û—Ç–º–µ–Ω–∞')
async def cancel_func(msg: Message, state: FSMContext):
    """–í—Å–µ –æ—Ç–º–µ–Ω—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º"""
    await state.clear()
    await msg.answer(f'–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=main_menu)


@admin_router.message(F.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def get_settings_menu(msg: Message):
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:', reply_markup=all_settings)


@admin_router.callback_query(F.data.startswith('set_'))
async def choice_setting(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫ –µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    await callback.answer()
    setting_dict = {
        'set_status': ('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', status_setting),
        'set_level': (f'–ü–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç <b>{settings_dict["achievement"]}</b> —Ä–µ–ø—É—Ç–∞—Ü–∏–∏', level_setting),
        # 'set_notification': ('–í—ã–±–µ—Ä–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:', notification_setting),
        # 'set_gratitude': ('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', gratitude_list_setting)
    }
    await callback.message.answer(setting_dict[callback.data][0], reply_markup=setting_dict[callback.data][1])


# --------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏
# --------------------


@admin_router.callback_query(F.data.startswith('status_'))
async def status_management(callback: CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
    await callback.answer()
    if callback.data == 'status_view':
        msg_text = '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:\n\n'
        for points_need, status_name in status_dict.items():
            msg_text += f'<b>{status_name}</b>: <i>{points_need}</i> –æ—á–∫–æ–≤\n'
        await callback.message.answer(msg_text, reply_markup=await view_status_list(status_dict))
        pass
    else:
        await state.set_state(AdminStates.status_add_name)
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:', reply_markup=cancel_button)


@admin_router.message(AdminStates.status_add_name)
async def get_status_name(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    await state.set_data({'status_name': msg.text})
    await state.set_state(AdminStates.status_add_points)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—á–∫–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:')


@admin_router.message(AdminStates.status_add_points)
async def get_status_points(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –æ—á–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        status_name = (await state.get_data())['status_name']
        for points, status in status_dict.items():
            if status == status_name:
                status_dict.pop(points)
                status_dict[int(msg.text)] = status_name
                break
        else:
            status_dict[int(msg.text)] = status_name
        await bot_base.add_status(status_name, int(msg.text))
        await msg.answer('–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=main_menu)
        await state.clear()
    except ValueError:
        await msg.answer('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:')


@admin_router.callback_query(F.data.startswith('del_'))
async def remove_status(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å"""
    rm_status = status_dict.pop(int(callback.data.replace('del_', '')))
    await bot_base.remove_status(rm_status)
    msg_text = '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:\n\n'
    for points_need, status_name in status_dict.items():
        msg_text += f'<b>{status_name}</b>: <i>{points_need}</i> –æ—á–∫–æ–≤\n'
    await callback.message.edit_text(msg_text, reply_markup=await view_status_list(status_dict))


# --------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–∞–º–∏
# --------------------


@admin_router.message(F.text == 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º')
async def balance_management_menu(msg: Message, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await msg.answer('–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–¥ —á—å–∏–º –±–∞–ª–∞–Ω—Å–æ–º —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—é:')
    await state.set_state(AdminStates.select_user)


@admin_router.message(AdminStates.select_user, F.forward_from.as_('reply'))
async def select_user_for_manipulation(msg: Message, state: FSMContext, reply=None):
    """–ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞"""
    if reply:
        try:
            user_info = await bot_base.get_user_info(reply.id)
            msg_text = (f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{reply.first_name}</b>:\n'
                        f'–í—Å–µ–≥–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–æ: <b>{user_info[1]}</b>\n'
                        f'–ù–∞ –±–∞–ª–∞–Ω—Å–µ: <b>{user_info[2]}\n</b>'
                        f'–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{user_info[3]}</b>')
        except IndexError:
            # –ó–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
            msg_text = (f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{reply.first_name}</b>:\n'
                        f'–í—Å–µ–≥–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–æ: <b>0</b>\n'
                        f'–ù–∞ –±–∞–ª–∞–Ω—Å–µ: <b>0\n</b>'
                        f'–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>None</b>')

        await state.set_data({'uid': reply.id, 'ufn': reply.first_name})
        await msg.answer(msg_text, reply_markup=balance_menu)


@admin_router.callback_query(AdminStates.select_user, F.data.startswith('balance_'))
async def user_balance_manipulation(callback: CallbackQuery, state: FSMContext):
    """–ó–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()
    action_dict = {
        'balance_add': (AdminStates.balance_add, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:'),
        'balance_reduce': (AdminStates.balance_reduce, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:')
    }
    await callback.message.answer(action_dict[callback.data][1], reply_markup=cancel_button)
    await state.set_state(action_dict[callback.data][0])


@admin_router.message(AdminStates.balance_add)
async def user_balance_add(msg: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        user = await state.get_data()
        await bot_base.add_points(user['uid'], int(msg.text))
        await msg.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{user["ufn"]}</b> –Ω–∞—á–∏—Å–ª–µ–Ω–æ {msg.text} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏', reply_markup=main_menu)
        await check_new_status(user['uid'])

        for chat in CHAT_ID:  # –ò—â–µ–º —é–∑–µ—Ä–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º –∏ –ø–æ —ç—Ç–∏–º –∂–µ —á–∞—Ç–∞–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try:
                user_name = await get_username(chat, user['uid'])
                if user_name:
                    msg_text = f'{user_name}, –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {msg.text} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏\n{settings_dict["admin_add"]}'
                    mess = await bot.send_message(chat_id=chat, text=msg_text)
                    await message_cleaner.schedule_message_deletion(mess.chat.id, mess.message_id)
            except Exception as e:
                print(e)
        await state.clear()
    except ValueError:
        await msg.answer('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:')


@admin_router.message(AdminStates.balance_reduce)
async def user_balance_reduce(msg: Message, state: FSMContext):
    """–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–æ–≤ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await state.get_data()
        await bot_base.reduce_user_balance(user['uid'], int(msg.text))
        await msg.answer(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user["ufn"]}</b> —Å–ø–∏—Å–∞–Ω–æ {msg.text} –æ—á–∫–æ–≤', reply_markup=main_menu)
        for chat in CHAT_ID:  # –ò—â–µ–º —é–∑–µ—Ä–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º –∏ –ø–æ —ç—Ç–∏–º –∂–µ —á–∞—Ç–∞–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try:
                user_name = await get_username(chat, user['uid'])
                if user_name:
                    msg_text = f'{user_name}, —É –í–∞—Å —Å–ø–∏—Å–∞–Ω–æ {msg.text} –±–∞–ª–æ–≤\n{settings_dict["admin_reduce"]}'
                    mess = await bot.send_message(chat_id=chat, text=msg_text)
                    await message_cleaner.schedule_message_deletion(mess.chat.id, mess.message_id)
            except Exception as e:
                print(e)
        await state.clear()
    except ValueError:
        await msg.answer('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:')


# --------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
# --------------------


@admin_router.callback_query(F.data == 'level_set')
async def change_achievement(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', reply_markup=cancel_button)
    await state.set_state(AdminStates.set_level)


@admin_router.message(AdminStates.set_level)
async def set_new_achievement(msg: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    try:
        await bot_base.set_new_setting('achievement', int(msg.text))
        settings_dict['achievement'] = int(msg.text)
        await msg.answer(f'–ù–æ–≤—ã–π –ø–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ {msg.text} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏(–∏–π) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', reply_markup=main_menu)
        await state.clear()
    except ValueError:
        await msg.answer('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:')


# --------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# --------------------


@admin_router.callback_query(F.data == 'sett_notification')
async def notification_menu(callback: CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await callback.answer()
    msg_text = (f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n'
                f'<b>–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> - {settings_dict["new_gratitude"]}\n\n'
                f'<b>–ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b> - {settings_dict["new_achievement"]}\n\n'
                f'<b>–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞</b> - {settings_dict["new_status"]}\n\n'
                f'<b>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> - {settings_dict["admin_add"]}\n\n'
                f'<b>–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤</b> - {settings_dict["admin_reduce"]}')
    await callback.message.answer(msg_text, reply_markup=notification_setting)


@admin_router.callback_query(F.data.startswith('notif_'))
async def start_notif_change(callback: CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç—è—Ç –∏–∑–º–µ–Ω–∏—Ç—å"""
    await callback.answer()
    await state.set_state(AdminStates.sett_notification)
    await state.set_data({'notification': callback.data.replace('notif_', '')})
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', reply_markup=cancel_button)


@admin_router.message(AdminStates.sett_notification)
async def catch_new_text_for_notification(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º"""
    notif = (await state.get_data())['notification']
    settings_dict[notif] = msg.text
    await bot_base.set_new_setting(notif, msg.text)
    await msg.answer('–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω!', reply_markup=main_menu)
    await state.clear()


# --------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ "–±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ" —Å–ø–∏—Å–∫–∞
# --------------------


@admin_router.callback_query(F.data == 'sett_gratitude')
async def start_change_gratitude_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤, –∞ —Ç–∞–∫ –∂–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–∏—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å """
    await callback.answer()
    msg_text = '–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ "–±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö" —Å–ª–æ–≤:\n\n'
    for word in settings_dict['gratitude_list']:
        msg_text += word + '\n'
    await callback.message.answer(msg_text, reply_markup=gratitude_list_setting)


@admin_router.callback_query(F.data.startswith('gratitude_'))
async def choice_action_with_gratitude(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π"""
    await callback.answer()
    action_dict = {
        'gratitude_add': (AdminStates.gratitude_add, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ:'),
        'gratitude_del': (AdminStates.gratitude_del, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    }
    await state.set_state(action_dict[callback.data][0])
    await callback.message.answer(action_dict[callback.data][1], reply_markup=cancel_button)


@admin_router.message(AdminStates.gratitude_add)
async def add_new_gratitude(msg: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"""
    settings_dict['gratitude_list'].add(msg.text)
    await bot_base.add_gratitude_word(msg.text)
    await msg.answer('–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
    msg_text = '–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ "–±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö" —Å–ª–æ–≤:\n\n'
    for word in settings_dict['gratitude_list']:
        msg_text += word + '\n'
    await msg.answer(msg_text)
    await state.clear()


@admin_router.message(AdminStates.gratitude_del)
async def remove_gratitude(msg: Message, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"""
    try:
        settings_dict['gratitude_list'].remove(msg.text)
    except KeyError:  # –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ —á–µ–≥–æ –Ω–µ—Ç
        pass
    await bot_base.remove_gratitude_word(msg.text)
    await msg.answer('–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ!')
    msg_text = '–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ "–±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö" —Å–ª–æ–≤:\n\n'
    for word in settings_dict['gratitude_list']:
        msg_text += word + '\n'
    await msg.answer(msg_text)
    await state.clear()

