from aiogram.types import Message, CallbackQuery
from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from utils.admin_router import admin_router
from keyboards.admin_reply import *
from keyboards.admin_inline import *
from states import AdminStates
from loader import status_dict, bot_base


@admin_router.message(Command('start'))
async def start_function(msg: Message):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω–ø–∞–Ω–µ–ª–∏"""
    await msg.answer(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å <b>{msg.from_user.first_name}</b>üòÄ\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=main_menu)


@admin_router.message(F.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def get_settings_menu(msg: Message):
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:', reply_markup=all_settings)


@admin_router.callback_query(F.data.startswith('set_'))
async def choice_setting(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫ –µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    await callback.answer()
    settings_dict = {
        'set_status': ('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', status_setting),
        'set_level': ('–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', None),
        'set_notification': ('–í—ã–±–µ—Ä–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:', notification_setting),
        'set_gratitude': ('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', gratitude_list_setting)
    }
    await callback.message.answer(settings_dict[callback.data][0], reply_markup=settings_dict[callback.data][1])


@admin_router.callback_query(F.data.startswith('status_'))
async def status_management(callback: CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
    await callback.answer()
    if callback.data == 'status_view':
        msg_text = '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:\n\n'
        for points_need, status_name in status_dict.items():
            msg_text += f'<b>{status_name}</b>: <i>{points_need}</i> –æ—á–∫–æ–≤\n'
        await callback.message.answer(msg_text, reply_markup=await view_status_list(status_dict))
        pass
    else:
        await state.set_state(AdminStates.status_add_name)
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:', reply_markup=cancel_button)


@admin_router.message(AdminStates.status_add_name)
async def get_status_name(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    await state.set_data({'status_name': msg.text})
    await state.set_state(AdminStates.status_add_points)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—á–∫–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:')


@admin_router.message(AdminStates.status_add_points)
async def get_status_points(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –æ—á–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        status_name = (await state.get_data())['status_name']
        status_dict[int(msg.text)] = status_name
        await bot_base.add_status(status_name, int(msg.text))
        await msg.answer('–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=main_menu)
        await state.clear()
    except ValueError:
        await msg.answer('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:')


@admin_router.callback_query(F.data.startswith('del_'))
async def remove_status(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å"""
    rm_status = status_dict.pop(int(callback.data.replace('del_', '')))
    await bot_base.remove_status(rm_status)
    msg_text = '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:\n\n'
    for points_need, status_name in status_dict.items():
        msg_text += f'<b>{status_name}</b>: <i>{points_need}</i> –æ—á–∫–æ–≤\n'
    await callback.message.edit_text(msg_text, reply_markup=await view_status_list(status_dict))
